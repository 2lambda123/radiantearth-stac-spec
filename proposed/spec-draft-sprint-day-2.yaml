swagger: '2.0'
info:
  title: A Proposed Imagery Catalog API using the OGC WFS 3.0 standard as a starting point
  version: 0.0.2
  description: >-
    This document is a proposal draft. Though it is the first one in this folder it is by no means the only one. If others are
    contributed they will all be considered equally on Day 1 of the Imagery Catalog API Sprint. This is simply the first one proposed.
    If you have additional ideas feel free to either fork this and propose Pull Requests, or create your own new spec-draft and add to this folder.
    
    
    WARNING - THIS IS WORK IN PROGRESS.
    
    
    WARNING - This is a Swagger / OpenAPI 2.0 variant. A final spec should be in OpenAPI 3.0, but this is used for quick code generation purposes.

  contact:
    name: Acme Corporation
    email: info@example.org
    url: 'http://example.org/'
  license:
    name: CC-BY 4.0 license
    url: 'https://creativecommons.org/licenses/by/4.0/'
schemes:
  - http
host: data.example.org
basePath: /
paths:
  /:
    get:
      summary: describe the feature collections in the dataset
      operationId: describeCollections
      tags:
        - Capabilities
      produces:
        - application/json
      responses:
        '200':
          description: The feature collections shared by this API.
          schema:
            $ref: '#/definitions/content'
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
  /api:
    get:
      summary: the API description - this document
      operationId: getApiDescription
      tags:
        - Capabilities
      produces:
        - application/openapi+json;version=2.0
      responses:
        '200':
          description: >-
            The formal documentation of this API according to the OpenAPI
            specification, version 3.0. I.e., this document.
          schema:
            type: object
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
  /features:
    get:
      summary: Retrieve features matching filters
      description: >- 
        Description goes here
      operationId: getFeatures
      tags:
        - Features
      parameters:
        - $ref: '#/parameters/bbox'
        - $ref: '#/parameters/schema' 
        - $ref: '#/parameters/time'
        - $ref: '#/parameters/filter'
      produces:
        - application/geo+json
      responses:
        '200':
          description: >-
            Description here
          schema:
            $ref: '#/definitions/FeatureCollection'
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
    post:
      summary: Retrieve items matching filters
      operationId: getItemsPost
      tags:
        - Features
      produces:
        - application/geo+json
      responses:
        '200':
          description: >-
            Description here
          schema:
            $ref: '#/definitions/FeatureCollection'
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
  '/features/{id}':
    get:
      summary: Retreive item by id
      operationId: getItem
      tags:
        - Features
      parameters:
        - $ref: '#/parameters/id'
      produces:
        - application/geo+json
      responses:
        '200':
          description: A feature.
          schema:
            $ref: '#/definitions/Feature'
        '404':
          description: 'The feature with id {id} does not exist.'
          schema:
            $ref: '#/definitions/exception'
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
  /schemas:
    get:
      summary: Get list of schemas
      operationId: getSchemas
      tags:
        - Schemas
      responses:
        '200':
          description: Successful schema
          schema:
            type: object
            additionalProperties:
              $ref: '#/definitions/Schema'
  '/schemas/{schemaId}':
    get:
      summary: Get schemas
      operationId: getSchemaById
      tags:
        - Schemas
      parameters:
        - name: schemaId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful resposne
          schema:
            $ref: '#/definitions/Schema'
parameters:
  time:
    name: time
    type: array
    description: Adheres to RFC3339
    items:
      type: string   
    in: query
  bbox:
    name: bbox
    in: query
    description: >-
      Only features that have a geometry that intersects the bounding box are
      selected. The bounding box is provided as four numbers:

      * West, South, East, North
    type: array
    items:
      type: number
      minItems: 4
      maxItems: 4
      minimum: -180
      maximum: 180
    collectionFormat: csv
  filter:
    name: filter
    in: query
    type: string
    description: A placeholder for a future filter implementation
  schema:
    name: type
    in: query
    type: string
  id:
    name: id
    in: path
    description: The id of a feature
    required: true
    type: string
definitions:
  exception:
    type: object
    required:
      - code
    properties:
      code:
        type: string
      description:
        type: string
  bbox:
    type: object
    required:
      - bbox
    properties:
      crs:
        type: string
        enum:
          - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
        default: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
      bbox:
        description: >-
          West, South, East, North
        type: array
        items:
          minItems: 4
          maxItems: 4
          type: number
          minimum: -180
          maximum: 180
        example:
          - -180
          - -90
          - 180
          - 90
  content:
    type: object
    required:
      - collections
    properties:
      collections:
        type: array
        items:
          $ref: '#/definitions/collectionInfo'
  collectionInfo:
    type: object
    required:
      - name
      - links
    properties:
      name:
        type: string
        example: address
      title:
        type: string
        example: address
      description:
        type: string
        example: An address.
      links:
        type: array
        items:
          $ref: '#/definitions/link'
        example:
          - href: 'http://data.example.com/imagery'
            rel: item
          - href: 'http://example.com/concepts/imagery.html'
            rel: describedBy
            type: text/html
      extent:
        $ref: '#/definitions/bbox'
      crs:
        description: The coordinate reference system. This is set to be LongLat (CRS84).
        type: array
        items:
          type: string
        default:
          - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
        example:
          - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
  link:
    type: object
    required:
      - href
    properties:
      href:
        type: string
      rel:
        type: string
        example: prev
      type:
        type: string
        example: application/geo+json
      hreflang:
        type: string
        example: en
  FeatureCollection:
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Feature'
  typeCollection:
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/type'
  geometry:
    type: object
    required:
      - type
    properties:
      type:
        type: string
        enum:
          - Polygon
      coordinates:
        type: array
        items:
          type: array
          items:
            type: array
            minItems: 4
            items:
              type: number
              minItems: 2
  Feature:
    type: object
    required:
      - id
      - type
      - schema
      - geometry
      - properties
    properties:
      id:
        type: string
        example: path/to/example.tif
        description: 'unique ID, potentially link to file'
      bbox:
        $ref: '#/definitions/bbox'
        description: >-
          Pair of min and max coordinates in CRS units, (min_x, min_y, max_x,
          max_y)
        example: '[-180,-90,180,90]'
      geometry:
        $ref: '#/definitions/geometry'
        description: Describing the actual footprint of the imagery
        example: 'POLYGON((-180 -90, -180 90, 180 90, 180 -90, -180 -90))'
      title:
        type: string
        example: A scene from some satellite
        description: >-
          scene title from provider of image. Can be the ID of the image
          provider
      type:
        type: string
        description: The GeoJSON type
        enum:
          - Feature
      schema:
        type: string
        description: the id of the schema
      properties:
        type: object
        description: The geojson properties
  type:
    type: string
    enum:
      - image
      - related-images
  Schema:
    additionalProperties:
      $ref: '#/definitions/SchemaItem'
  SchemaItem:
    required:
      - type
    properties:
      description:
        $ref: '#/definitions/SchemaDescription'
      constraint:
        $ref: '#/definitions/SchemaPropertyConstraints'
      type:
        $ref: '#/definitions/SchemaPropertyType'
  SchemaDescription:
    required:
      - title
    properties:
      title:
        type: string
        description: 'Title of this dimension, normally used for display to a human'
      uom:
        type: string
        description: Units of Measure
      unitsSymbol:
        type: string
        description: Symbol of the units
      keywords:
        type: array
        description: >-
          Unordered list of one or more commonly used or formalised word(s) or
          phrase(s) used to describe this type
        items:
          type: string
  SchemaPropertyConstraints:
    type: object
    externalDocs:
      url: >-
        https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5
      description: Derived from Json/Swagger schema
    properties:
      maximum:
        type: number
      exclusiveMaximum:
        type: boolean
      minimum:
        type: number
      exclusiveMinimum:
        type: boolean
      maxLength:
        type: integer
      minLength:
        type: integer
      pattern:
        type: string
      maxItems:
        type: integer
      minItems:
        type: integer
      uniqueItems:
        type: boolean
      multipleOf:
        type: number
  SchemaPropertyType:
    type: string
    enum:
      - String
      - Text
      - Int32
      - Int64
      - Double
      - Time
      - StringSet
      - Int64Set
      - TimeRange
      - Int64Range
      - DoubleRange
      - Doc
      - Geo
    description: |
      * `String` -  A text string
      * `Text` - A text string with text-search index
      * `Int32` - 32-bit integer
      * `Int64` - 64-bit integer
      * `Double` -  IEEE double-precision floating-point Number
      * `Time` - A timestamp with millisecond precision
      * `StringSet` -  A set made of text entities
      * `Int64Set` - A set made of 64-bit integer
      * `TimeRange` - A time range with begin and end
      * `Int64Range` - A integer range with begin and end
      * `DoubleRange` - A floating-point range with begin and end
      * `Doc` - Arbitrary Document
      * `Geo` - Geojson geometry
  Time:
    type: integer
    format: int64
    description: UTC Timestamp with millisecond precision
    minimum: 0
  StringSet:
    type: array
    items:
      type: string
  Int64Set:
    type: array
    items:
      type: integer
      format: int64
  TimeRange:
    description: begin and end UTC timestamps with millisecond precision
    properties:
      begin:
        type: integer
        format: int64
        minimum: 0
      end:
        type: integer
        format: int64
        minimum: 0
  Int64Range:
    description: An integer range with begin and end
    properties:
      begin:
        type: integer
        format: int64
      end:
        type: integer
        format: int64
  DoubleRange:
    description: A double range with begin and end
    properties:
      begin:
        type: number
        format: double
      end:
        type: number
        format: double
  Doc:
    description: Arbitrary json document
    additionalProperties:
      type: object
  GeoJson:
    description: root geojson object
    properties:
      type:
        $ref: '#/definitions/FeatureType'
    required:
      - type
    discriminator: type
  FeatureType:
    type: string
    enum:
      - Point
      - MultiPoint
      - LineString
      - MultiLineString
      - Polygon
      - MultiPolygon
      - GeometryCollection
      - Feature
      - FeatureCollection
  GeometryCollection:
    allOf:
      - $ref: '#/definitions/GeoJson'
      - type: object
        properties:
          geometries:
            $ref: '#/definitions/GeometryCollection2D'
        required:
          - geometries
  MultiPolygon:
    allOf:
      - $ref: '#/definitions/GeoJson'
      - type: object
        properties:
          coordinates:
            $ref: '#/definitions/MultiPolygon2D'
        required:
          - coordinates
  MultiLineString:
    allOf:
      - $ref: '#/definitions/GeoJson'
      - type: object
        properties:
          coordinates:
            $ref: '#/definitions/MultiLineString2D'
        required:
          - coordinates
  MultiPoint:
    allOf:
      - $ref: '#/definitions/GeoJson'
      - type: object
        properties:
          coordinates:
            $ref: '#/definitions/MultiPoint2D'
        required:
          - coordinates
  Polygon:
    allOf:
      - $ref: '#/definitions/GeoJson'
      - type: object
        properties:
          coordinates:
            $ref: '#/definitions/Polygon2D'
        required:
          - coordinates
  LineString:
    allOf:
      - $ref: '#/definitions/GeoJson'
      - type: object
        properties:
          coordinates:
            $ref: '#/definitions/LineString2D'
        required:
          - coordinates
  Point:
    allOf:
      - $ref: '#/definitions/GeoJson'
      - type: object
        properties:
          coordinates:
            $ref: '#/definitions/Point2D'
        required:
          - coordinates
  GeoPolygon2D:
    description: A geojson 2d polygon
    type: object
    properties:
      type:
        description: Type of geometry
        type: string
        enum:
          - Polygon
      coordinates:
        $ref: '#/definitions/Polygon2D'
    required:
      - type
      - coordinates
  GeometryCollection2D:
    type: array
    items:
      $ref: '#/definitions/GeoJson'
  MultiPolygon2D:
    type: array
    items:
      $ref: '#/definitions/Polygon2D'
  Polygon2D:
    type: array
    minItems: 1
    items:
      $ref: '#/definitions/LinearRing2D'
  MultiLineString2D:
    type: array
    items:
      $ref: '#/definitions/LineString2D'
  LinearRing2D:
    type: array
    minItems: 4
    items:
      $ref: '#/definitions/Point2D'
  LineString2D:
    type: array
    minItems: 2
    items:
      $ref: '#/definitions/Point2D'
  MultiPoint2D:
    type: array
    minItems: 2
    items:
      $ref: '#/definitions/Point2D'
  Point2D:
    description: A 2d geojson point
    type: array
    minimum: 2
    maximum: 2
    items:
      type: number
      format: double
tags:
  - name: Capabilities
    description: >-
      Essential characteristics of this API including information about the
      data.
  - name: Features
    description: Access to data (features).
